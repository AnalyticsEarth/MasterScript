define( [ "qlik",
'text!./template.ng.html',
'./definition',
'text!./dialog-template.ng.html',
'css!./MasterScript.css',
'util',
'enigma',
'autogenerated/qix/engine-api'
],
function ( qlik, template, definition, dialogTemplate, cssStyle, Util, enigma, schema) {
	'use strict';
	return {
		support : {
			snapshot: false,
			export: false,
			exportData : false
		},
		template: template,
		definition: definition,
		controller: ['$scope','luiDialog', function ( $scope, luiDialog) {
			$scope.layout = $scope.$parent.layout;
			console.log($scope);


			/* This function opens the dialog window when the openWizard() function
			is called */
			$scope.openWizard = function(){
				luiDialog.show({
					template: dialogTemplate,
					input: {
						selectedKey: '',
						wizardName: '',
						showKey: false,
						wizardList: $scope.wizardList,
						appModel: $scope.component.model.app,
						layout: $scope.layout,
						isLoading: false,
						enableVizBuild: true,
						previewEnabled: false,
						buttonState: 0,
						buttonTitle: 'Preview Master Items',
						buttonIcon: 'view',
						warningMessage: ''
					},
					controller: ['$scope', function( $scope ) {
						console.log($scope);

						/* Get current Qlik App and field list */
						var app = qlik.currApp(this);
						app.getList("FieldList", function(reply){
							$scope.input.fieldList = reply;
							console.log(reply);
						});

						/* This utility function is called when conversion a written JSON
						path from a config template and returnin the required object
						in the template */
						$scope.objectByString = function(o, s) {
							s = s.replace(/\[(\w+)\]/g, '.$1');
							s = s.replace(/^\./, '');
							var a = s.split('.');
							for (var i = 0, n = a.length; i < n; ++i) {
								var k = a[i];
								if (k in o) {
									o = o[k];
								} else {
									return;
								}
							}
							return o;
						};

						/* Set the default tab and create the function which will allow for
						the tab to be changed in code */
						$scope.tabs = 'tab1';
						$scope.make_tab_active = function(tabid) {
							$scope.tabs = 'tab'+tabid;
							//console.log($scope.tabs);
						}

						//$scope.make_tab_active(1);

						$scope.input.masterScriptList = app.createTable(["_MasterItemType",	"_MasterItemName",	"_MasterItemDescription",	"_MasterItemColor", "_MasterItemTags",	"_MasterItemExpression1",	"_MasterItemExpression2",	"_MasterItemExpression3",	"_MasterItemExpression4",	"_MasterItemExpression5"], [],{rows:200});

						$scope.process = function(){
							console.log("Process Click");
							$scope.processItems();
						};

						$scope.processItems = function(){

							var table = $scope.input.masterScriptList;
												//_MasterItemExpression2	_MasterItemExpression3	_MasterItemExpression4	_MasterItemExpression5

							var typeCol = table.getColByName('_MasterItemType');
							var nameCol = table.getColByName('_MasterItemName');
							var descCol = table.getColByName('_MasterItemDescription');
							var colorCol = table.getColByName('_MasterItemColor');
							var tagCol = table.getColByName('_MasterItemTags');

							$scope.input.masterScriptList.rows.forEach(function(row) {
    						console.log(row);

								var fieldsList = [];

								for(var i = 1; i <= 10; i++)
								{
									var expCol = table.getColByName('_MasterItemExpression'+i);
									var cell = row.cells[expCol];
									if(cell && cell.qElemNumber >= 0){
										fieldsList.push(cell.qText);
									}
								}

								var tagsList = row.cells[tagCol].qText.split(";");

								var itemData = {
									displayName: row.cells[nameCol].qText,
									description: row.cells[descCol].qText,
									color: row.cells[colorCol].qText,
									fields: fieldsList,
									tags: tagsList
								};

								if(row.dimensions[typeCol].qText == "Dimension"){
									$scope.createDimension(itemData);
								}
								if(row.dimensions[typeCol].qText == "Measure"){
									$scope.createMeasure(itemData);
								}
							});
						};


						/* Create Dimension */
						$scope.createDimension = function(t){
							var group = "N";
							if(t.fields.length > 1) group = "H";
							var dimJSON =
							{
								qInfo: {
									qType: "dimension"
								},
								qDim: {
									qGrouping: group,
									qFieldDefs: t.fields,
									qFieldLabels: t.fields,
									title:t.displayName,
									coloring: {
										baseColor: {
											color: t.color,
											index: -1
										}
									}
								},
								qMetaDef: {
									title:t.displayName,
									description:t.description,
									tags:t.tags
								}
							};

							return $scope.input.appModel.createDimension(dimJSON).then((data) => {

							});
						};

						/* Create Measure */
						$scope.createMeasure = function(t){
							var mesJSON =
							{
								qInfo: {
									qType: "measure"
								},
								qMeasure: {
									qLabel:t.displayName,
									qGrouping: "N",
									qDef: t.fields[0],
									qExpressions:[],
									qActiveExpression: 0,
									coloring: {
										baseColor: {
											color: t.color,
											index: -1
										}
									}
								},
								qMetaDef: {
									title:t.displayName,
									description:t.description,
									tags:t.tags
								}
							};

							return $scope.input.appModel.createMeasure(mesJSON).then((data) => {

							});
						};

						/* Create Master Visualization */
						$scope.createMasterViz = function(aeVizTemplate){
							//console.log('Create Viz');
							if(aeVizTemplate.type){
								$.getJSON('../extensions/AAIExpressionBuilder/templates/' + aeVizTemplate.type + '.json', function(response){
									var vizJSON = response;

									vizJSON.qMetaDef.title = aeVizTemplate.displayTitle;
									vizJSON.qMetaDef.description = aeVizTemplate.description;

									aeVizTemplate.replacements.forEach(function(r){
										$scope.input.idList.forEach(function(vid){
											if(vid.templateId == r.template){
												var obj = $scope.objectByString(vizJSON, r.path);
												obj[r.key] = vid.qixId;
											}
										});
									});
									$scope.input.appModel.createObject(vizJSON).then((data) => {console.log('Create Viz'); console.log(data);});
								});
							}
						};

						/* Create Variable */
						$scope.createVariable = function(variableTemplate){
							//console.log('Create Variable');
							if(variableTemplate.enabled){
								var app = qlik.currApp(this);
								app.variable.getContent(variableTemplate.name).then(
								function(data){
									//console.log('Check Variable');
									//console.log(data);
									variableTemplate.built = 'exists';
								}, function(e){
									//console.log('Variable does not exist, create variable');
									app.variable.create({
										qName : variableTemplate.name,
										qDefinition : variableTemplate.definition,
										qComment : variableTemplate.description
									}).then((data) => {
										//console.log('Created Variable');
										//console.log(data);
										variableTemplate.built = 'created';
									});
								});
							}
						};

					}]
				});
			}
		}]
	};
});
